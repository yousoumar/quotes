{"version":3,"sources":["assets/bg.jpg","components/App.js","index.js"],"names":["App","useState","text","author","randomQuote","setRandomQuote","quotesState","quotesSetState","apiError","setApiError","bgImages","setBgImgages","bgImage","bodyBgImage","setBodyBgImage","document","body","style","backgroundImage","useEffect","fetch","then","response","json","data","catch","images","hits","map","image","largeImageURL","id","className","onClick","authorName","Math","floor","random","length","filtredQuotes","filter","quote","generateNewAuthorQuote","split","ReactDOM","render","StrictMode","getElementById"],"mappings":"+KAAe,MAA0B,+B,eCoG1BA,MAhGf,WAGE,MAAsCC,mBAClC,CAAEC,KAAO,wGACPC,OAAS,iBAFf,mBAAOC,EAAP,KAAoBC,EAApB,KAOA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAGA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,EAAiCR,mBAAS,IAA1C,mBAAOS,EAAP,KAAiBC,EAAjB,KAGA,EAAsCV,mBAASW,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA6CA,OA5CAC,SAASC,KAAKC,MAAMC,gBAApB,cAA6CL,EAA7C,KACAM,qBAAU,WAGRC,MAAM,+BACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJjB,EAAeiB,MAGhBC,OAAM,WACLhB,GAAY,GACZJ,EAAe,CAACH,KAAO,uDAAwDC,OAAS,qBAI9FiB,MAAM,mEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAK,GACFA,EAASA,EAAOC,KAAKC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,iBACxCnB,EAAae,MAIhBD,OAAM,WAAOd,EAAa,CAACC,SAE5B,IAmBA,sBAAKmB,GAAG,MAAR,UACE,sBAAKC,UAAU,eAAf,UACE,oBAAGA,UAAY,QAAf,cAAyB5B,EAAYF,KAArC,OACA,oBAAG8B,UAAY,SAAf,gBAA4B5B,EAAYD,OAASC,EAAYD,OAAS,wBAGtEK,GACA,sBAAKwB,UAAU,oBAAf,UAEI5B,EAAYD,QAAU,yBACE6B,UAAY,mBACZC,QAAU,kBAnB5C,SAAgCC,GAC9BpB,EAAeJ,EAASyB,KAAKC,MAAMD,KAAKE,SAAS3B,EAAS4B,UAC1D,IAAMC,EAAgBjC,EAAYkC,QAAO,SAAAC,GAAK,OAAIA,EAAMtC,SAAW+B,KACnE7B,EAAekC,EAAcJ,KAAKC,MAAMD,KAAKE,SAASE,EAAcD,UAgBtBI,CAAuBtC,EAAYD,SAFnD,qBAIWC,EAAYD,OAAOwC,MAAM,KAAK,MAKjE,wBACEX,UAAY,mBACZC,QArCV,WACK3B,EAAYgC,OAAS,IACtBxB,EAAeJ,EAASyB,KAAKC,MAAMD,KAAKE,SAAS3B,EAAS4B,UAC1DjC,EAAeC,EAAY6B,KAAKC,MAAMD,KAAKE,SAAS/B,EAAYgC,YAgC5D,8BClFVM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,U","file":"static/js/main.56353c9d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.e8061912.jpg\";","import { useState, useEffect} from 'react';\nimport bgImage from '../assets/bg.jpg'\nimport './App.css';\n\nfunction App() {\n\n  // to manipulate the random quote\n  const [randomQuote, setRandomQuote] = useState(\n      { text : \"The way we communicate with others and with ourselves ultimately determines the quality of our lives.\", \n        author : \"Tony Robbins\"\n      }\n    );\n  \n  // to manipulate the quotes that we will receive from the API\n  const [quotesState, quotesSetState] = useState([]);\n  \n  // to handle quotes api call errors\n  const [apiError, setApiError] = useState(false);\n\n  // to manipulate the background images that we will receive from the API\n  const [bgImages, setBgImgages] = useState([]);\n\n  // to manipulate the background image of the body\n  const [bodyBgImage, setBodyBgImage] = useState(bgImage);\n  document.body.style.backgroundImage = `url(${bodyBgImage})`;\n  useEffect(() => {\n\n    // fetch quotes\n    fetch(\"https://type.fit/api/quotes\")\n        .then(response => response.json())\n        .then(data => {\n          quotesSetState(data);\n          \n        })\n        .catch(()=>{\n          setApiError(true);\n          setRandomQuote({text : \"We have issues with our database. Come back later :)\", author : \"The Developer\"})\n        });\n\n    // fetch background images\n    fetch(`https://pixabay.com/api/?key=19829269-60c1bb959fa930d104d880ae3`)\n    .then(response => response.json())\n    .then(images =>{\n        images = images.hits.map(image => image.largeImageURL);\n        setBgImgages(images)\n      }\n    )\n    // if we could not retrieve images from the API\n    .catch(() => {setBgImgages([bgImage])});\n    }\n  , []);\n\n  function generateNewQuote(){\n    if(quotesState.length > 0 ){\n      setBodyBgImage(bgImages[Math.floor(Math.random()*bgImages.length)]);\n      setRandomQuote(quotesState[Math.floor(Math.random()*quotesState.length)]);\n      \n\n    }\n  }\n\n  function generateNewAuthorQuote(authorName){\n    setBodyBgImage(bgImages[Math.floor(Math.random()*bgImages.length)]);\n    const filtredQuotes = quotesState.filter(quote => quote.author === authorName);\n    setRandomQuote(filtredQuotes[Math.floor(Math.random()*filtredQuotes.length)]);\n    \n  }\n\n  return (\n    <div id=\"app\">\n      <div className=\"quote-author\">\n        <p className = \"quote\">\"{randomQuote.text}\"</p>\n        <p className = \"author\">by {randomQuote.author ? randomQuote.author : \"Unknown author\"}</p>\n        \n      </div>\n      {!apiError && \n        <div className=\"buttons-container\">\n          {\n            randomQuote.author && <button \n                                    className = \"new-quote-button\"\n                                    onClick ={()=>generateNewAuthorQuote(randomQuote.author)}\n                                  >\n                                    More of {randomQuote.author.split(' ')[0]}\n                                  </button>\n          }\n          \n          \n          <button \n            className = \"new-quote-button\"\n            onClick ={generateNewQuote}\n          >\n            New quote\n          </button>\n        </div>\n      }\n    </div>\n      \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}